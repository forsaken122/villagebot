{
  "_args": [
    [
      {
        "raw": "micro-bot",
        "scope": null,
        "escapedName": "micro-bot",
        "name": "micro-bot",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/pierluigi/Development/bot/firstbot"
    ]
  ],
  "_from": "micro-bot@latest",
  "_id": "micro-bot@2.2.4",
  "_inCache": true,
  "_location": "/micro-bot",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/micro-bot_2.2.4_1523125311314_0.00019324655638586208"
  },
  "_npmUser": {
    "name": "dotcypress",
    "email": "dotcypress@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "micro-bot",
    "scope": null,
    "escapedName": "micro-bot",
    "name": "micro-bot",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/micro-bot/-/micro-bot-2.2.4.tgz",
  "_shasum": "7d47a087ede18176368c98a8cf24c4b03d2e8900",
  "_shrinkwrap": null,
  "_spec": "micro-bot",
  "_where": "/Users/pierluigi/Development/bot/firstbot",
  "author": {
    "name": "Vitaly Domnikov",
    "email": "dotcypress@gmail.com"
  },
  "bin": {
    "micro-bot": "./bin/micro-bot"
  },
  "bugs": {
    "url": "https://github.com/telegraf/micro-bot/issues"
  },
  "dependencies": {
    "dotenv": "^5.0.1",
    "minimist": "^1.2.0",
    "telegraf": "^3.20.0"
  },
  "description": "Zero-configuration Telegram bot runner",
  "devDependencies": {
    "eslint": "^4.4.1",
    "eslint-config-standard": "^11.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-node": "^6.0.1",
    "eslint-plugin-promise": "^3.0.0",
    "eslint-plugin-standard": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-BX38fKqNFx4/IlRlcd43ODZ6BtuDn010l5nM78xxpmuWmTdG8wbb97BVXTaG3CMkpQFzF7wZy7AT4kkNuB6k9g==",
    "shasum": "7d47a087ede18176368c98a8cf24c4b03d2e8900",
    "tarball": "https://registry.npmjs.org/micro-bot/-/micro-bot-2.2.4.tgz",
    "fileCount": 9,
    "unpackedSize": 11786
  },
  "engines": {
    "node": ">=8.1"
  },
  "gitHead": "0a725b55b09b3be86a83e674ec0ad2bacda505f1",
  "homepage": "https://github.com/telegraf/micro-bot#readme",
  "keywords": [
    "telegraf",
    "telegram",
    "bot"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dotcypress",
      "email": "dotcypress@gmail.com"
    }
  ],
  "name": "micro-bot",
  "optionalDependencies": {},
  "readme": "[![NPM Version](https://img.shields.io/npm/v/micro-bot.svg?style=flat-square)](https://www.npmjs.com/package/micro-bot)\n[![node](https://img.shields.io/node/v/micro-bot.svg?style=flat-square)](https://www.npmjs.com/package/micro-bot)\n[![Build Status](https://img.shields.io/travis/telegraf/micro-bot.svg?branch=master&style=flat-square)](https://travis-ci.org/telegraf/micro-bot)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](http://standardjs.com/)\n\n# μ-bot\n> 🤖 Zero-configuration Telegram bot runner\n\n## Documentation\n\n`micro-bot` was built on top of [`Telegraf`](https://github.com/telegraf/telegraf) library.\n\n[Telegraf API documentation](http://telegraf.js.org).\n\n## Installation\n\nInstall from NPM:\n\n```bash\n$ npm install micro-bot\n```\n\n**Note**: `micro-bot` requires Node `8.5.0` or later\n\n## Scaffolding\n\nIf you have installed `yarn^0.24` or `npm^5` you can use [`create-bot`](https://github.com/telegraf/create-bot) scaffolding tool:\n\n```bash\n$ npx create-bot smart-bot\n$ cd smart-bot\n```\n\nOr using `yarn`:\n\n```bash\n$ yarn create bot smart-bot\n$ cd smart-bot\n```\n\n## Quick start\n\nThe following example will answer with important information about everything.\n\n```bash\n$ mkdir smart-bot\n$ cd smart-bot\n$ npm init\n$ npm install micro-bot --save\n```\n\nThen write your `index.js`.\n\n```js\nmodule.exports = ({ reply }) => reply('42')\n```\n\nThen in your `package.json`:\n\n```js\n\"main\": \"index.js\",\n\"scripts\": {\n  \"start\": \"micro-bot\"\n}\n```\n\nTo run the bot, use the `micro-bot` command:\n\n```bash\n$ BOT_TOKEN='TOKEN' npm start\n```\n\nor\n\n```bash\n$ micro-bot -t TOKEN index.js\n```\n\nTo run the bot with webhook support, provide webhook domain name:\n\n```bash\n$ micro-bot -t TOKEN -d yourdomain.tld echo.js\n```\n\nSupported environment variables:\n\n* `process.env.BOT_TOKEN` - Bot token\n* `process.env.BOT_DOMAIN` - Webhook domain\n\n## Telegraf context\n\n`micro-bot` automatically fetch Bot info from telegram servers at start.\n\nYou can obtain it from update context:\n\n```js\nmodule.exports = (ctx) => {\n  return ctx.reply(`Hey, my name is ${ctx.botInfo.first_name} ${ctx.botInfo.last_name}`)\n}\n```\n\n## Deployment to `now`\n\nLet's deploy your `micro-bot` with Realtime global deployments by Zeit.\n\nFirst, install [`now`](https://zeit.co/now)\n```bash\n$ npm install now -g\n$ now login\n```\n\nThen add `now-start` script in `package.json` as in following snippet:\n\n```js\n\"scripts\": {\n  \"now-start\": \"micro-bot -d ${NOW_URL}\"\n}\n```\n\nFinally use `now` to deploy:\n\n```bash\n$ now -e BOT_TOKEN='YOUR BOT TOKEN'\n```\n\nCongratulations, your bot is alive! 🎉\n\n## Deployment to Heroku\n\nOkay, now we will deploy our `micro-bot` to Heroku. Why not?!\n\nFirst, install [`heroku binaries`](https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up) and login via console.\n\nThen, init new git repo:\n```bash\n$ git init\n$ heroku create\n```\n\nAfterwards, update Heroku config:\n\n```bash\n$ heroku config:set --app YourAppId BOT_TOKEN='YOUR BOT TOKEN'\n$ heroku config:set --app YourAppId BOT_DOMAIN='https://YourAppId.herokuapp.com'\n```\n\nThen add `Procfile` into the root of your project, with one line:\n\n```Procfile\nweb: micro-bot -p $PORT\n```\n\nFinally use git to deploy:\n\n```bash\n$ git add index.js package.json\n$ git commit -m 'initial commit'\n$ git push heroku master\n```\n\nCongratulations, your bot is alive! Again.\n\n#### Example μ-bots\n\n* [ 🔥 Glitch example](https://glitch.com/edit/#!/dashing-light)\n* [`@uncover_bot`](https://telegram.me/uncover_bot) - [Source code](https://uncover.now.sh/_src)\n* [`@epub2mobi_bot`](https://telegram.me/epub2mobi_bot) - [Source code](https://epub2mobi.now.sh/_src)\n* [`@gorchichkabot`](https://bot.gorchichka.com) - [Source code](https://github.com/agudulin/gorchichkabot)\n* [`@aloudbot`](https://telegram.me/aloudbot) - [Source code](https://github.com/shrynx/aloudbot)\n\n## Advanced Examples\n\n```js\nconst { mount, reply } = require('micro-bot')\nmodule.exports = mount('sticker', reply('👍'))\n```\n\n```js\nconst { readFileSync } = require('fs')\nconst { Composer } = require('micro-bot')\nconst app = new Composer()\n\napp.start((ctx) => ctx.reply('Welcome'))\napp.help((ctx) => ctx.reply('Help message'))\napp.hears('hi', ({ reply }) => reply('Hello'))\napp.on('sticker', ({ reply }) => reply('👍'))\n\n// Export bot handler\nmodule.exports = app\n\n// Or you can export hash with handlers and options\nmodule.exports = {\n  initialize: (bot) => {...},\n  botHandler: app,\n  requestHandler:  (req, res, next) => {...},\n  options: {\n    telegram: {\n      agent: new HttpsProxyAgent('proxy url')\n    }\n  },\n  tlsOptions: {\n    key:  readFileSync('server-key.pem'),\n    cert: readFileSync('server-cert.pem'),\n    ca: [\n      // This is necessary only if the client uses the self-signed certificate.\n      readFileSync('client-cert.pem')\n    ]\n  }\n}\n```\n\n### Stages & Scenes\n\n```js\nconst { Composer, Stage, Scene, session } = require('micro-bot')\n\n// Greeter scene\nconst greeter = new Scene('greeter')\ngreeter.enter((ctx) => ctx.reply('Hi'))\ngreeter.leave((ctx) => ctx.reply('Buy'))\ngreeter.hears(/hi/gi, (ctx) => ctx.scene.leave())\ngreeter.on('message', (ctx) => ctx.reply('Send `hi`'))\n\nconst stage = new Stage()\nstage.register(greeter)\n\nconst bot = new Composer()\nbot.use(session())\nbot.use(stage.middleware())\nbot.command('greeter', (ctx) => ctx.scene.enter('greeter'))\nbot.command('cancel', (ctx) => ctx.scene.leave())\nmodule.exports = bot\n\n```\n\n## Credits\n\n`micro-bot` is highly inspired by [`Micro`](https://github.com/zeit/micro/)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/telegraf/micro-bot.git"
  },
  "scripts": {
    "test": "eslint ."
  },
  "version": "2.2.4"
}
